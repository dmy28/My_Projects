
CREATE TABLE actori (
    id_actor NUMeric(5) NOT NULL,
    nume     VARCHAR(20) NOT NULL CHECK (length(nume) > 1),
    prenume  VARCHAR(20) NOT NULL CHECK (length(prenume) > 1)
);

ALTER TABLE actori ADD CONSTRAINT actori_pk PRIMARY KEY ( id_actor );

CREATE TABLE client (
    id_client NUMERic(5) NOT NULL,
    nume      VARCHAR(20) NOT NULL CHECK ( length(nume) > 1 ),
    prenume   VARCHAR(20) NOT NULL CHECK ( length(prenume) > 1 ),
    adresa    VARCHAR(30) NOT NULL CHECK ( length(adresa) > 1 ),
    email VARCHAR(25) NOT NULL CHECK (
    email LIKE '%_@_%._%' AND
    LENGTH(email) - LENGTH(REPLACE(email, '@', '')) = 1 AND
    LENGTH(SUBSTRING_INDEX(email, '.', -1)) >= 2
)
,
    telefon   CHAR(10) NOT NULL CHECK ( length(telefon) = 10
                                             AND telefon NOT LIKE '%[^0-9]%' )
);

ALTER TABLE client ADD CONSTRAINT client_pk PRIMARY KEY ( id_client );

ALTER TABLE client ADD CONSTRAINT client_email UNIQUE ( email);
ALTER TABLE client ADD CONSTRAINT client_telefon UNIQUE ( telefon);

CREATE TABLE comenzi (
    id_comanda   NUMERic(5) NOT NULL,
    id_client    NUMERic(5) NOT NULL,
    id_plata     NUMERic(5) NOT NULL,
    id_rezervare NUMERic(5) NOT NULL,
    data_comanda DATE NOT NULL
);

CREATE UNIQUE INDEX comenzi__idx ON
    comenzi (
        id_plata
    ASC );

CREATE UNIQUE INDEX comenzi__idxv1 ON
    comenzi (
        id_rezervare
    ASC );

ALTER TABLE comenzi ADD CONSTRAINT comenzi_pk PRIMARY KEY ( id_comanda );

ALTER TABLE comenzi
    ADD CONSTRAINT comenzi__un UNIQUE ( id_client,
                                        id_plata,
                                        id_rezervare );

CREATE TABLE locuri (
    id_loc       NUMERic(5) NOT NULL,
    id_rezervare NUMERic(5) NOT NULL,
    rand         CHAR(1) NOT NULL CHECK ( rand BETWEEN 'A' AND 'N' ),
    numar        NUMERic(2) NOT NULL CHECK ( numar BETWEEN 1 AND 18
                                           OR numar BETWEEN 1 AND 18 ),
    disponibil   CHAR(1) NOT NULL
);


ALTER TABLE locuri ADD CONSTRAINT locuri_pk PRIMARY KEY ( id_loc );

CREATE TABLE plata (
    id_plata   NUMeric(5) NOT NULL,
    total_pret NUmeric(3) NOT NULL CHECK ( total_pret > 0 )
);


ALTER TABLE plata ADD CONSTRAINT plata_pk PRIMARY KEY ( id_plata );

CREATE TABLE rezervari (
    id_rezervare   NUMERic(5) NOT NULL,
    id_spectacol   NUMERic(5) NOT NULL,
    data_rezervare DATE NOT NULL
);

ALTER TABLE rezervari ADD CONSTRAINT rezervari_pk PRIMARY KEY ( id_rezervare );

CREATE TABLE spectacole (
    id_spectacol  NUMERic(5) NOT NULL,
    tip_spectacol VARCHAR(10) NOT NULL CHECK ( tip_spectacol IN ( 'Opera', 'Balet' ) ),
    nume          VARCHAr(30) NOT NULL,
    data_ora      DATE NOT NULL
);


ALTER TABLE spectacole ADD CONSTRAINT spectacole_pk PRIMARY KEY ( id_spectacol );

CREATE TABLE "Spectacole-Actori" (
    id_spectacol NUMERic(5) NOT NULL,
    id_actor     NUMERic(5) NOT NULL
);

ALTER TABLE "Spectacole-Actori" ADD CONSTRAINT "Spectacole-Actori_PK" PRIMARY KEY ( id_spectacol,
                                                                                    id_actor );

ALTER TABLE comenzi
    ADD CONSTRAINT comenzi_client_fk FOREIGN KEY ( id_client )
        REFERENCES client ( id_client );

ALTER TABLE comenzi
    ADD CONSTRAINT comenzi_plata_fk FOREIGN KEY ( id_plata )
        REFERENCES plata ( id_plata );

ALTER TABLE comenzi
    ADD CONSTRAINT comenzi_rezervari_fk FOREIGN KEY ( id_rezervare )
        REFERENCES rezervari ( id_rezervare );

ALTER TABLE locuri
    ADD CONSTRAINT locuri_rezervari_fk FOREIGN KEY ( id_rezervare )
        REFERENCES rezervari ( id_rezervare );

ALTER TABLE rezervari
    ADD CONSTRAINT rezervari_spectacole_fk FOREIGN KEY ( id_spectacol )
        REFERENCES spectacole ( id_spectacol );

ALTER TABLE "Spectacole-Actori"
    ADD CONSTRAINT "Spectacole-Actori_Actori_FK" FOREIGN KEY ( id_actor )
        REFERENCES actori ( id_actor );

ALTER TABLE "Spectacole-Actori"
    ADD CONSTRAINT "Spectacole-Actori_Spect_FK" FOREIGN KEY ( id_spectacol )
        REFERENCES spectacole ( id_spectacol );

CREATE SEQUENCE actori_id_actor_seq START WITH 25000 INCREMENT BY 2 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER actori_id_actor_trg BEFORE
    INSERT ON actori
    FOR EACH ROW
    WHEN ( new.id_actor IS NULL )
BEGIN
    :new.id_actor := actori_id_actor_seq.nextval;
END;
/

CREATE SEQUENCE client_id_client_seq START WITH 1200 INCREMENT BY 3 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER client_id_client_trg BEFORE
    INSERT ON client
    FOR EACH ROW
    WHEN ( new.id_client IS NULL )
BEGIN
    :new.id_client := client_id_client_seq.nextval;
END;
/

CREATE SEQUENCE comenzi_id_comanda_seq START WITH 2000 INCREMENT BY 4 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER comenzi_id_comanda_trg BEFORE
    INSERT ON comenzi
    FOR EACH ROW
    WHEN ( new.id_comanda IS NULL )
BEGIN
    :new.id_comanda := comenzi_id_comanda_seq.nextval;
END;
/

CREATE SEQUENCE locuri_id_loc_seq START WITH 100 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER locuri_id_loc_trg BEFORE
    INSERT ON locuri
    FOR EACH ROW
    WHEN ( new.id_loc IS NULL )
BEGIN
    :new.id_loc := locuri_id_loc_seq.nextval;
END;
/

CREATE SEQUENCE plata_id_plata_seq START WITH 3000 INCREMENT BY 5 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER plata_id_plata_trg BEFORE
    INSERT ON plata
    FOR EACH ROW
    WHEN ( new.id_plata IS NULL )
BEGIN
    :new.id_plata := plata_id_plata_seq.nextval;
END;
/

CREATE SEQUENCE rezervari_id_rezervare_seq START WITH 6000 INCREMENT BY 4 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER rezervari_id_rezervare_trg BEFORE
    INSERT ON rezervari
    FOR EACH ROW
    WHEN ( new.id_rezervare IS NULL )
BEGIN
    :new.id_rezervare := rezervari_id_rezervare_seq.nextval;
END;
/

CREATE SEQUENCE spectacole_id_spectacol_seq START WITH 9000 INCREMENT BY 5 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER spectacole_id_spectacol_trg BEFORE
    INSERT ON spectacole
    FOR EACH ROW
    WHEN ( new.id_spectacol IS NULL )
BEGIN
    :new.id_spectacol := spectacole_id_spectacol_seq.nextval;
END;
/

CREATE OR REPLACE TRIGGER trg_check_data_in_viitor
BEFORE INSERT OR UPDATE ON SPECTACOLE
FOR EACH ROW
BEGIN
  IF :NEW.data_ora <= SYSTIMESTAMP THEN
    RAISE_APPLICATION_ERROR(-20001, 'Data si ora trebuie sa fie in viitor.');
  END IF;
END;
/

CREATE OR REPLACE TRIGGER rezervari_check_data_in_trecut
BEFORE INSERT OR UPDATE ON rezervari
FOR EACH ROW
BEGIN
  IF :NEW.data_rezervare >= SYSTIMESTAMP THEN
    RAISE_APPLICATION_ERROR(-20001, 'Data rezervarii nu poate sa fie in viitor ');
  END IF;
END;
/

CREATE OR REPLACE TRIGGER comenzi_check_data_in_trecut
BEFORE INSERT OR UPDATE ON comenzi
FOR EACH ROW
BEGIN
  IF :NEW.data_comanda >= SYSTIMESTAMP THEN
    RAISE_APPLICATION_ERROR(-20001, 'Data comenzii nu poate sa fie in viitor ');
  END IF;
END;
/



